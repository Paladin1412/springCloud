server:
  port: 8001
spring:
  datasource:
    #   数据源基本配置
    username: root
    password: Lx147258369@@@@
    #Loading class `com.mysql.jdbc.Driver'. This is deprecated. The new driver class is `com.mysql.cj.jdbc.Driver'. The driver is automatically registered via the SPI and manual loading of the driver class is generally unnecessary.
    #
    #问题原因： 
    #    升级后的mysql驱动类，Driver位置由com.mysql.jdbc.Driver 变为com.mysql.cj.jdbc.Driver 
    driver-class-name: com.mysql.cj.jdbc.Driver
    #5.7版本的数据，由于加固的安全模块，需要加useSSL=false这个，不然会抛出异常
    url: jdbc:mysql://47.107.108.246:3306/user?useUnicode=true&characterEncoding=utf-8&useSSL=false
    #指定数据源类型 默认是org.apache.tomcat.jdbc.pool.DataSource    查看这个DataSourceConfiguration就会明白；
    type: com.alibaba.druid.pool.DruidDataSource
    #   数据源其他配置， 显示为黄色字体表示DataSourceProperties里面没有这些属性，需要创建一个DruidDataSource，并注入到容器；
    initialSize: 5
    minIdle: 5
    maxActive: 20
    maxWait: 60000
    timeBetweenEvictionRunsMillis: 60000
    minEvictableIdleTimeMillis: 300000
    validationQuery: SELECT 1 FROM DUAL
    testWhileIdle: true
    testOnBorrow: false
    testOnReturn: false
    poolPreparedStatements: true
    #   配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
    filters:
      commons-log:
        connection-logger-name: stat,wall,slf4j
    maxPoolPreparedStatementPerConnectionSize: 20
    useGlobalDataSourceStat: true
    connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500
      #运行Sql文件在数据库中创建表（每次启动就创建）  查看这个类就明白为什么这么写：DataSourceInitializer
      #schema:
      #  - classpath:sql/User.sql
      #  - classpath:sql/good.sql
      # 运行sql文件在表中添加数据
      #data:
      # - classpath:sql/User.sql
    # - classpath:sql/good.sql
  profiles:
    active: dev
  #整合单机版redis
  redis:
    host: 47.107.108.246
    port: 6379
    password: lvxiang147258369
    timeout: 1000
    jedis:
      pool:
        max-active: 8
        max-wait: -1
        max-idle: 5
        min-idle: 0
    database: 0
  cache:
    type: ehcache
    ehcache:
      config: ehcache.xml

  application:
    name: cloud-provider-payment  #对外暴露微服务名字,大小写敏感，serviceId
  zipkin:
    base-url: http://localhost:9411 #把采集到的数据放在这个zipkin上面展示
  sleuth:
    sampler:
      probability: 1 #采样介于0-1之间，1表示全部采集
#Mybatis
mybatis:
  #在Eclipse中到dao文件与mapper.xml文件只要在同一级目录下即可，但是在IDEA中，mapper.xml要放在resources目录下
  mapper-locations: classpath*:mybatis/mapper/*Mapper.xml
  type-aliases-package: com.lv.springboot.entity #别名扫描
  config-location: classpath:mybatis/mybatisConfig.xml

eureka:
  instance:
    instance-id: cloud-provider-payment8001
    prefer-ip-address: true #访问路径可以显示IP地址，再Eureka平台里的服务实例上 会显示IP(鼠标移上去)
    lease-renewal-interval-in-seconds: 30 #eurekaClient客户端发送心跳的间隔时间；默认为30
    lease-expiration-duration-in-seconds: 90 #eureka服务端收到最后一次心跳后等待是的时间上线，默认为90s，超时就剔除服务(除去自我保护的情况下）
  client:
    service-url:
      #defaultZone: http://localhost:7001/eureka
      defaultZone: http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/

#info信息，在eureka服务界面中服务连接后的信息
#访问路径可以显示IP地址，再Eureka平台里的服务实例 会显示IP(鼠标点击后显示的信息)
info:
  app.name: atguigu-microservicecloud
  company.name: www.lv.com
  build.artifactId: $project.artifactId$
  build.version: $project.version$

